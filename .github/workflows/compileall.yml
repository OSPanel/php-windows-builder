name: Compile All Extensions

on:
  workflow_dispatch:
    inputs:
      max_extensions:
        description: 'Maximum number of extensions to process at once'
        required: false
        default: '200'
        type: string

jobs:
  compile-extensions:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Process Extensions
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MAX_COUNT: ${{ github.event.inputs.max_extensions }}
      run: |
        #!/bin/bash

        # –õ–æ–∫–∞–ª—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ UTF-8
        export LC_ALL=C.UTF-8
        export LANG=C.UTF-8

        # –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –∏ —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º –¥–æ —Ü–∏–∫–ª–∞
        set -e
        set -x

        echo "üîß Debug: Starting script execution"
        echo "üîß Debug: MAX_COUNT=$MAX_COUNT"
        echo "üîß Debug: GITHUB_TOKEN length: ${#GITHUB_TOKEN}"

        # –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∫–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        trigger_extension_workflow() {
            local extension_name="$1"
            local php_versions="$2"

            echo "üîç Processing extension: $extension_name"
            echo "üîß Debug: Received PHP versions: $php_versions"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è matrix.json
            if [ ! -f "extension/BuildPhpExtension/config/matrix.json" ]; then
                echo "‚ùå Matrix file matrix.json not found"
                return 1
            fi

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            repo=$(jq -r ".$extension_name.source // empty" "extension/BuildPhpExtension/config/matrix.json" 2>/dev/null || echo "")
            if [ -z "$repo" ] || [ "$repo" = "null" ]; then
                echo "‚ùå Repository source not found for $extension_name"
                return 1
            fi

            echo "üîß Debug: Extension $extension_name has source: $repo"

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–µ—Ä—Å–∏–π PHP
            IFS=',' read -ra php_version_list <<< "$php_versions"
            declare -A ext_groups
            invalid_versions=()

            echo "üîß Debug: Parsed PHP versions array: ${php_version_list[*]}"

            for php_version in "${php_version_list[@]}"; do
                php_version=$(echo "$php_version" | xargs)
                echo "üîç Processing PHP version: $php_version"

                ext_version=$(jq -r ".$extension_name.ver.\"$php_version\" // empty" "extension/BuildPhpExtension/config/matrix.json" 2>/dev/null || echo "")

                if [ -z "$ext_version" ] || [ "$ext_version" = "null" ]; then
                    echo "‚ö†Ô∏è PHP $php_version - version not found"
                    invalid_versions+=("$php_version")
                else
                    echo "‚úÖ PHP $php_version - extension version: $ext_version"

                    if [ -z "${ext_groups[$ext_version]+_}" ]; then
                        ext_groups[$ext_version]="$php_version"
                    else
                        ext_groups[$ext_version]="${ext_groups[$ext_version]},$php_version"
                    fi
                fi
            done

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —á—Ç–æ —Å–æ–±–∏—Ä–∞—Ç—å
            if [ ${#ext_groups[@]} -eq 0 ]; then
                echo "‚ùå No valid PHP versions found for extension $extension_name"
                return 1
            fi

            echo "üîß Debug: Found ${#ext_groups[@]} version groups for $extension_name"

            # –¢—Ä–∏–≥–≥–µ—Ä–∏–º workflow –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—Å–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            total_workflows=0
            for ext_version in "${!ext_groups[@]}"; do
                php_versions_for_ext="${ext_groups[$ext_version]}"

                # ts/nts –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                if [[ "$extension_name" == *"parallel"* ]]; then
                    ts_list="ts"
                elif [[ "$extension_name" == *"wincache"* ]]; then
                    ts_list="nts"
                else
                    ts_list="nts,ts"
                fi

                echo "üöÄ Triggering workflow for extension '$extension_name' version $ext_version and PHP versions: $php_versions_for_ext"

                # –ö–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å ‚Äî URL –∏–ª–∏ –∏–º—è
                if [[ "$repo" =~ ^https?:// ]]; then
                    param_name="extension-url"
                    param_value="$repo"
                else
                    param_name="extension-name"
                    param_value="$repo"
                fi

                echo "üîß Debug: Using $param_name = $param_value"

                # –§–æ—Ä–º–∏—Ä—É–µ–º JSON-–ø–µ–π–ª–æ–∞–¥
                json_payload="{
                  \"ref\": \"master\",
                  \"inputs\": {
                    \"$param_name\": \"$param_value\",
                    \"extension-ref\": \"$ext_version\",
                    \"php-version-list\": \"$php_versions_for_ext\",
                    \"arch-list\": \"x64\",
                    \"ts-list\": \"$ts_list\"
                  }
                }"

                echo "üîß Debug: JSON payload: $json_payload"

                # –ó–∞–ø—Ä–æ—Å –∫ GitHub API
                response=$(curl -s -w "\n%{http_code}" \
                  -X POST \
                  -H "Accept: application/vnd.github+json" \
                  -H "Authorization: Bearer $GITHUB_TOKEN" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  https://api.github.com/repos/OSPanel/php-windows-builder/actions/workflows/pecl.yml/dispatches \
                  -d "$json_payload")

                # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–ª–æ –∏ –∫–æ–¥
                http_code=$(echo "$response" | tail -n1)
                response_body=$(echo "$response" | head -n -1)

                echo "üîß Debug: HTTP Code: $http_code"
                echo "üîß Debug: Response: $response_body"

                if [ "$http_code" = "204" ]; then
                    echo "‚úÖ Successfully triggered workflow for $extension_name version $ext_version"
                    ((total_workflows++))
                else
                    echo "‚ùå API Error (HTTP $http_code)"
                    if [ -n "$response_body" ]; then
                        echo "‚ùå Response: $response_body"
                    fi
                    echo "‚ùå Failed to trigger workflow for $extension_name version $ext_version"
                    return 1
                fi

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                if [ $total_workflows -lt ${#ext_groups[@]} ]; then
                    echo "‚è±Ô∏è Rate limiting: waiting 3 seconds before next workflow trigger..."
                    sleep 3
                fi
            done

            if [ ${#invalid_versions[@]} -gt 0 ]; then
                invalid_versions_string=$(IFS=', '; echo "${invalid_versions[*]}")
                echo "‚ö†Ô∏è Warning: The following PHP versions were not found in matrix.json for $extension_name: $invalid_versions_string"
            fi

            echo "‚úÖ Successfully triggered $total_workflows workflows for extension $extension_name"
            return 0
        }

        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
        matrix_path="extension/BuildPhpExtension/config/matrix.json"
        max_count="${MAX_COUNT:-200}"

        echo "üîß Debug: Matrix path: $matrix_path"
        echo "üîß Debug: Max count: $max_count"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ max_count ‚Äî —á–∏—Å–ª–æ
        if ! [[ "$max_count" =~ ^[0-9]+$ ]]; then
            echo "‚ùå max_count must be a positive integer, got: $max_count"
            exit 1
        fi

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
        if [ ! -f "$matrix_path" ]; then
            echo "‚ùå Matrix file not found: $matrix_path"
            ls -la extension/BuildPhpExtension/config/ || echo "‚ùå Config directory not found"
            exit 1
        fi

        echo "üîß Debug: Matrix file exists, reading extensions..."

        # –°—á–∏—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π (–Ω–∞–∑–≤–∞–Ω–∏–π —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π)
        all_extensions=$(jq -r 'keys[]' "$matrix_path" 2>/dev/null || echo "")
        if [ -z "$all_extensions" ]; then
            echo "‚ùå Failed to read extensions from matrix file"
            echo "üîß Debug: Matrix file content preview:"
            head -10 "$matrix_path"
            exit 1
        fi

        readarray -t all_extensions_array <<< "$all_extensions"

        if [ ${#all_extensions_array[@]} -eq 0 ]; then
            echo "‚ùå No extensions found in matrix file"
            exit 1
        fi

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        to_process=("${all_extensions_array[@]:0:$max_count}")

        echo "üìä Total extensions in matrix: ${#all_extensions_array[@]}"
        echo "üìä Extensions to process: ${#to_process[@]}"
        echo "üìã Extension list: ${to_process[*]}"

        echo "üîß Debug: Starting extension processing loop..."

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        successfully_processed=()
        failed_extensions=()
        versions="7.2,7.3,7.4,8.0,8.1,8.2,8.3,8.4"
        total_extensions=${#to_process[@]}
        current_extension=0

        # –í–ê–ñ–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º –Ω–∞ –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞,
        # —á—Ç–æ–±—ã –Ω–∏ –æ–¥–∏–Ω —Å–±–æ–π –≤–Ω—É—Ç—Ä–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –Ω–µ –æ–±—Ä—ã–≤–∞–ª –≤–µ—Å—å —à–∞–≥.
        set +e

        for extension in "${to_process[@]}"; do
            ((current_extension++)) || true
            echo "üîÑ Processing extension $current_extension/$total_extensions: $extension" || true

            trigger_extension_workflow "$extension" "$versions"
            rc=$?

            if [ $rc -eq 0 ]; then
                successfully_processed+=("$extension")
                echo "‚úÖ Extension $extension processed successfully" || true
            else
                failed_extensions+=("$extension")
                echo "‚ùå Error processing extension $extension (rc=$rc)" || true
            fi

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
            if [ $current_extension -lt $total_extensions ]; then
                echo "‚è±Ô∏è Rate limiting: waiting 5 seconds before next extension..." || true
                sleep 5
            fi
        done

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º –¥–ª—è –∑–∞–≤–µ—Ä—à–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        set -e

        echo "‚úÖ Processing completed."
        echo "üìä Successfully processed: ${#successfully_processed[@]}"
        echo "üìä Failed to process: ${#failed_extensions[@]}"

        if [ ${#failed_extensions[@]} -gt 0 ]; then
            echo "‚ùå Failed extensions: ${failed_extensions[*]}"
        fi

        # –ü–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –í–°–Å —É–ø–∞–ª–æ
        if [ ${#successfully_processed[@]} -eq 0 ] && [ ${#to_process[@]} -gt 0 ]; then
            echo "‚ùå All extensions failed to process"
            exit 1
        fi

        echo "üéâ All workflows have been triggered successfully!"
        echo "üîß Debug: Script completed successfully"