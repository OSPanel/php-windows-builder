name: üîß Build PHP Extensions Packs
run-name: üöÄ Build PHP Ext Packs ${{ inputs.php-versions || 'all-in-matrix' }}

on:
  workflow_dispatch:
    inputs:
      php-versions:
        description: 'Which PHP versions to build (comma-separated), e.g.: 7.2,7.4,8.1,8.3. Default: all found in matrix.json'
        required: false
      ts:
        description: 'Build types: ts, nts or ts,nts'
        required: false
        default: 'ts,nts'

permissions:
  contents: write

jobs:
  generate-matrix:
    name: üéØ Generate Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk-matrix.outputs.matrix }}
      release-tag: ${{ steps.release-info.outputs.tag }}
      release-title: ${{ steps.release-info.outputs.title }}
    steps:
      - name: üõ°Ô∏è Checkout repository
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Generate release info
        id: release-info
        shell: bash
        run: |
          # Generate timestamp-based release tag
          TIMESTAMP=$(date -u '+%Y.%m.%d.%H.%M')
          TAG="ext-pack-${TIMESTAMP}"
          TITLE="Extensions Pack for PHP v${TIMESTAMP}"

          echo "üè∑Ô∏è Release tag: $TAG"
          echo "üìù Release title: $TITLE"

          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "title=$TITLE" >> "$GITHUB_OUTPUT"

      - name: üßÆ Generate matrix from matrix.json
        id: mk-matrix
        shell: bash
        run: |
          set -euo pipefail

          echo "üîç Reading build configuration from matrix.json..."

          PHP_VERSIONS_INPUT="${{ inputs.php-versions || '' }}"
          TS_INPUT="${{ inputs.ts || 'ts,nts' }}"

          # Extract all available PHP versions from matrix.json
          ALL_PHP_VERS=$(
            jq -r '
              to_entries
              | map(.value.ver | keys[])
              | unique
              | .[]
            ' extension/BuildPhpExtension/config/matrix.json
          )

          echo "üìã Available PHP versions in matrix: $(echo "$ALL_PHP_VERS" | tr '\n' ' ')"

          # Process requested PHP versions
          if [[ -n "$PHP_VERSIONS_INPUT" ]]; then
            echo "üéØ Using specified PHP versions: $PHP_VERSIONS_INPUT"
            IFS=',' read -ra REQ <<< "$PHP_VERSIONS_INPUT"
            PHP_VERS=()
            for v in "${REQ[@]}"; do
              v_trim=$(echo "$v" | xargs)
              if printf '%s\n' "${ALL_PHP_VERS[@]}" | grep -qx "$v_trim"; then
                PHP_VERS+=("$v_trim")
                echo "‚úÖ PHP $v_trim - found in matrix"
              else
                echo "‚ùå PHP $v_trim - not found in matrix, skipping"
              fi
            done
          else
            echo "üåê Using all available PHP versions from matrix"
            readarray -t PHP_VERS <<< "$ALL_PHP_VERS"
          fi

          if [[ ${#PHP_VERS[@]} -eq 0 ]]; then
            echo "üí• No valid PHP versions found to build"
            exit 1
          fi

          echo "üî® Final PHP versions to build: ${PHP_VERS[*]}"

          IFS=',' read -ra TS_VALUES <<< "$TS_INPUT"
          echo "‚öôÔ∏è Thread safety modes: ${TS_VALUES[*]}"

          # Build matrix using jq for proper JSON construction
          MATRIX_ITEMS=()
          for phpv in "${PHP_VERS[@]}"; do
            for ts in "${TS_VALUES[@]}"; do
              ts_trim=$(echo "$ts" | xargs)
              MATRIX_ITEMS+=("{\"php\":\"${phpv}\",\"ts\":\"${ts_trim}\"}")
            done
          done

          # Join array elements and create proper JSON
          printf -v ITEMS_STR '%s,' "${MATRIX_ITEMS[@]}"
          ITEMS_STR="${ITEMS_STR%,}"  # Remove trailing comma
          MATRIX_JSON="{\"include\":[${ITEMS_STR}]}"

          echo "üìä Generated matrix with ${#MATRIX_ITEMS[@]} combinations"
          echo "matrix=$MATRIX_JSON" >> "$GITHUB_OUTPUT"

  build-and-release:
    name: üîß Build ${{ matrix.php }}-${{ matrix.ts }}
    runs-on: windows-2022
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: üõ°Ô∏è Checkout repository
        uses: actions/checkout@v4

      - name: üéØ Determine toolset and naming
        id: toolset
        shell: bash
        run: |
          set -euo pipefail
          PHP="${{ matrix.php }}"
          TS="${{ matrix.ts }}"

          echo "üîç Determining compiler toolset for PHP $PHP..."

          # Compiler mapping:
          # 7.x => vc15
          # 8.0‚Äì8.3 => vs16
          # 8.4‚Äì8.5 => vs17
          major="${PHP%%.*}"
          minor="${PHP#*.}"

          tool=""
          if [[ "$major" == "7" ]]; then
            tool="vc15"
            echo "üèóÔ∏è PHP 7.x detected - using Visual Studio 2017 (vc15)"
          else
            if [[ "$minor" -ge 4 ]]; then
              tool="vs17"
              echo "üèóÔ∏è PHP 8.4+ detected - using Visual Studio 2022 (vs17)"
            else
              tool="vs16"
              echo "üèóÔ∏è PHP 8.0-8.3 detected - using Visual Studio 2019 (vs16)"
            fi
          fi

          TARGET_DIR="php-${PHP}-${TS}"
          echo "üìÅ Target directory: $TARGET_DIR"

          echo "tool=$tool" >> "$GITHUB_OUTPUT"
          echo "target=$TARGET_DIR" >> "$GITHUB_OUTPUT"

      - name: üìÅ Create target directory
        shell: pwsh
        run: |
          $target = "${{ steps.toolset.outputs.target }}"
          Write-Host "üìÅ Creating target directory: $target"
          New-Item -ItemType Directory -Force -Path $target | Out-Null
          Write-Host "‚úÖ Directory created successfully"

      - name: üìã Build download plan from matrix.json
        id: plan
        shell: bash
        run: |
          set -euo pipefail
          PHP="${{ matrix.php }}"
          TS="${{ matrix.ts }}"
          TOOL="${{ steps.toolset.outputs.tool }}"

          echo "üìã Building download plan for PHP $PHP ($TS, $TOOL)..."

          # Extract extensions and versions for this PHP version
          DOWNLOADS=$(jq -r --arg php "$PHP" '
            to_entries
            | map({
                ext: .key,
                ver: (.value.ver[$php] // "")
              })
            | map(select(.ver != ""))[]
            | @json
          ' extension/BuildPhpExtension/config/matrix.json)

          extension_count=$(echo "$DOWNLOADS" | wc -l)
          echo "üîç Found $extension_count extensions in matrix for PHP $PHP"

          PLAN_JSON='[]'
          processed=0
          while IFS= read -r row; do
            if [[ -n "$row" ]]; then
              ext=$(echo "$row" | jq -r '.ext')
              ver=$(echo "$row" | jq -r '.ver')
              original_ext="$ext"

              # Normalize extension names (same logic as pecl.yml)
              case "$ext" in
                "base58-php-ext") ext="base58" ;;
                "dd-trace-php") ext="ddtrace" ;;
                "msgpack-php") ext="msgpack" ;;
                "php-firebird") ext="interbase" ;;
                "php-ext-lz4") ext="lz4" ;;
                "php-memcached") ext="memcached" ;;
                "pecl-database-oci8") ext="oci8_19" ;;
                "pecl-database-pdo_oci") ext="pdo_oci" ;;
                "pecl-text-ssdeep") ext="ssdeep" ;;
              esac

              # Clean version from 'v' prefix
              ver_clean=$(echo "$ver" | sed 's/^v//')

              if [[ "$original_ext" != "$ext" ]]; then
                echo "üîÑ Normalized: $original_ext -> $ext"
              fi

              tag="${ext}-${ver_clean}"
              file="php_${ext}-${ver_clean}-${PHP}-${TS}-${TOOL}-x64.zip"
              url="https://github.com/OSPanel/php-windows-builder/releases/download/${tag}/${file}"
              PLAN_JSON=$(echo "$PLAN_JSON" | jq --arg url "$url" --arg file "$file" '. + [{url:$url,file:$file}]')

              processed=$((processed + 1))
              echo "üì¶ [$processed/$extension_count] Planned: $ext v$ver_clean"
            fi
          done <<< "$DOWNLOADS"

          echo "‚úÖ Download plan completed with $processed extensions"

          # Save plan to output
          echo "$PLAN_JSON" > plan.json
          {
            echo "plan<<EOF"
            cat plan.json
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: üì• Download extension archives
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Continue'
          $target = "${{ steps.toolset.outputs.target }}"

          Write-Host "üì• Starting download process..." -ForegroundColor Cyan
          Write-Host "üìÅ Target directory: $target" -ForegroundColor Gray

          $planJson = '${{ steps.plan.outputs.plan }}'
          $plan = $planJson | ConvertFrom-Json

          if (-not (Test-Path $target)) {
            New-Item -ItemType Directory -Path $target | Out-Null
          }

          $totalExtensions = $plan.Count
          $downloadedCount = 0
          $failedCount = 0
          $failedExtensions = @()

          Write-Host "üéØ Found $totalExtensions extensions to download" -ForegroundColor Cyan
          Write-Host ""

          $counter = 0
          foreach ($item in $plan) {
            $counter++
            $url = $item.url
            $file = Join-Path $target $item.file
            $extName = ($item.file -split '_')[1] -split '-' | Select-Object -First 1

            Write-Host "üì¶ [$counter/$totalExtensions] Downloading: $extName" -ForegroundColor Yellow

            try {
              # Check URL availability first
              $response = Invoke-WebRequest -Uri $url -Method Head -UseBasicParsing -ErrorAction Stop
              if ($response.StatusCode -eq 200) {
                Invoke-WebRequest -Uri $url -OutFile $file -UseBasicParsing -ErrorAction Stop
                Write-Host "‚úÖ Success: $extName downloaded" -ForegroundColor Green
                $downloadedCount++
              }
            } catch {
              Write-Host "‚ùå Failed: $extName - $($_.Exception.Message)" -ForegroundColor Red
              $failedExtensions += $extName
              $failedCount++
            }
          }

          Write-Host ""
          Write-Host "üìä Download Summary" -ForegroundColor Cyan
          Write-Host "==================" -ForegroundColor Cyan
          Write-Host "‚úÖ Successful: $downloadedCount extensions" -ForegroundColor Green
          Write-Host "‚ùå Failed: $failedCount extensions" -ForegroundColor $(if ($failedCount -gt 0) { 'Red' } else { 'Green' })

          if ($failedExtensions.Count -gt 0) {
            Write-Host "üí• Failed extensions: $($failedExtensions -join ', ')" -ForegroundColor Red
          }

          # Ensure at least some extensions were downloaded
          if ($downloadedCount -eq 0) {
            Write-Host "üí• Critical: No extensions downloaded successfully!" -ForegroundColor Red
            throw "Download process failed completely"
          }

          Write-Host ""
          Write-Host "üöÄ Proceeding with $downloadedCount available extensions..." -ForegroundColor Green

      - name: üìÇ Extract archives and cleanup
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $target = "${{ steps.toolset.outputs.target }}"

          Write-Host "üìÇ Extracting downloaded archives..." -ForegroundColor Cyan

          $zipFiles = Get-ChildItem -Path $target -Filter *.zip
          $zipCount = $zipFiles.Count

          if ($zipCount -eq 0) {
            Write-Host "‚ùå No ZIP files found to extract" -ForegroundColor Red
            throw "No archives to extract"
          }

          Write-Host "üéØ Found $zipCount archives to extract" -ForegroundColor Yellow

          $counter = 0
          $zipFiles | ForEach-Object {
            $counter++
            $zipName = $_.Name -replace '\.zip$', ''
            Write-Host "üì¶ [$counter/$zipCount] Extracting: $zipName" -ForegroundColor Yellow
            Expand-Archive -LiteralPath $_.FullName -DestinationPath $target -Force
            Write-Host "‚úÖ Extracted: $zipName" -ForegroundColor Green
          }

          Write-Host ""
          Write-Host "üßπ Cleaning up ZIP files..." -ForegroundColor Cyan
          Get-ChildItem -Path $target -Filter *.zip | Remove-Item -Force
          Write-Host "‚úÖ Cleanup completed" -ForegroundColor Green

      - name: üì¶ Pack final result
        id: pack
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $php = "${{ matrix.php }}"
          $ts  = "${{ matrix.ts }}"
          $tool = "${{ steps.toolset.outputs.tool }}"
          $target = "${{ steps.toolset.outputs.target }}"

          Write-Host "üì¶ Creating final extension pack..." -ForegroundColor Cyan

          # Generate archive name: php-ext-pack-<php>-<ts>-Win32-<tool>-x64.zip
          $zipName = "php-ext-pack-$php-$ts-Win32-$tool-x64.zip"
          Write-Host "üìÑ Archive name: $zipName" -ForegroundColor Yellow

          if (Test-Path $zipName) {
            Write-Host "üóëÔ∏è Removing existing archive..." -ForegroundColor Gray
            Remove-Item $zipName -Force
          }

          Write-Host "üî® Compressing extensions..." -ForegroundColor Yellow
          Compress-Archive -Path (Join-Path $target '*') -DestinationPath $zipName

          $archiveSize = [math]::Round((Get-Item $zipName).Length / 1MB, 2)
          Write-Host "‚úÖ Archive created successfully ($archiveSize MB)" -ForegroundColor Green

          Write-Output "zip=$zipName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: üì§ Upload artifact for release
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.pack.outputs.zip }}
          path: ${{ steps.pack.outputs.zip }}
          retention-days: 1

      - name: ‚úÖ Build completed
        run: |
          echo "üéâ Build completed successfully!"
          echo "üìä Configuration: PHP ${{ matrix.php }} (${{ matrix.ts }})"
          echo "üîß Toolset: ${{ steps.toolset.outputs.tool }}"
          echo "üì¶ Archive: ${{ steps.pack.outputs.zip }}"
          echo "‚è∞ Completion time: $(date)"
          echo ""
          echo "üöÄ Extension pack ready for release!"

  create-unified-release:
    name: üöÄ Create Unified Release
    runs-on: ubuntu-latest
    needs: [generate-matrix, build-and-release]
    if: always() && (needs.build-and-release.result == 'success' || contains(needs.build-and-release.result, 'success'))
    steps:
      - name: üõ°Ô∏è Checkout repository
        uses: actions/checkout@v4

      - name: üì• Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: üìã List downloaded artifacts
        shell: bash
        run: |
          echo "üìã Downloaded artifacts:"
          find ./artifacts -type f -name "*.zip" | while read -r file; do
            size=$(du -h "$file" | cut -f1)
            echo "üì¶ $(basename "$file") - $size"
          done

      - name: üöÄ Create unified release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          RELEASE_TAG="${{ needs.generate-matrix.outputs.release-tag }}"
          RELEASE_TITLE="${{ needs.generate-matrix.outputs.release-title }}"

          echo "üöÄ Creating unified release..."
          echo "üè∑Ô∏è Tag: $RELEASE_TAG"
          echo "üìù Title: $RELEASE_TITLE"

          # Count artifacts
          ARTIFACT_COUNT=$(find ./artifacts -type f -name "*.zip" | wc -l)
          echo "üì¶ Found $ARTIFACT_COUNT extension packs to release"

          if [ "$ARTIFACT_COUNT" -eq 0 ]; then
            echo "‚ùå No artifacts found to release"
            exit 1
          fi

          # Generate release body
          RELEASE_BODY="üîß **PHP Extensions Pack Collection**

          This release contains pre-compiled PHP extension packs for Windows (x64) across multiple PHP versions and thread safety modes.

          üì¶ **Package Contents:**
          - $ARTIFACT_COUNT extension packs
          - Support for multiple PHP versions (7.x, 8.x)
          - Both Thread Safe (TS) and Non-Thread Safe (NTS) variants
          - Compiled with appropriate Visual Studio toolsets

          ‚ö° **Quick Installation:**
          1. Download the appropriate pack for your PHP version and thread safety mode
          2. Extract the archive to your PHP installation directory
          3. Restart your web server

          üéØ **Naming Convention:**
          \`php-ext-pack-{VERSION}-{TS/NTS}-Win32-{TOOLSET}-x64.zip\`

          üõ†Ô∏è **Toolset Mapping:**
          - \`vc15\` - Visual Studio 2017 (PHP 7.x)
          - \`vs16\` - Visual Studio 2019 (PHP 8.0-8.3)
          - \`vs17\` - Visual Studio 2022 (PHP 8.4+)

          ü§ñ **Auto-generated** by GitHub Actions on $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

          # Delete existing release if it exists
          if gh release view "$RELEASE_TAG" -R "${{ github.repository }}" >/dev/null 2>&1; then
            echo "üóëÔ∏è Deleting existing release: $RELEASE_TAG"
            gh release delete "$RELEASE_TAG" -R "${{ github.repository }}" -y
          fi

          # Create new release
          echo "‚ú® Creating new release: $RELEASE_TAG"
          gh release create "$RELEASE_TAG" \
            -t "$RELEASE_TITLE" \
            -n "$RELEASE_BODY" \
            -R "${{ github.repository }}"

          # Upload all artifacts
          echo "üì§ Uploading artifacts to release..."
          counter=0
          find ./artifacts -type f -name "*.zip" | while read -r file; do
            counter=$((counter + 1))
            filename=$(basename "$file")
            echo "üì¶ [$counter/$ARTIFACT_COUNT] Uploading: $filename"
            gh release upload "$RELEASE_TAG" "$file" -R "${{ github.repository }}"
            echo "‚úÖ Uploaded: $filename"
          done

          echo ""
          echo "üéâ Unified release created successfully!"
          echo "üìä Repository: ${{ github.repository }}"
          echo "üè∑Ô∏è Release: $RELEASE_TAG"
          echo "üì¶ Artifacts: $ARTIFACT_COUNT extension packs"
          echo "üåê URL: https://github.com/${{ github.repository }}/releases/tag/$RELEASE_TAG"

      - name: üéâ Release completed
        run: |
          echo "üéâ All extension packs published successfully!"
          echo "üìä Release: ${{ needs.generate-matrix.outputs.release-tag }}"
          echo "‚è∞ Completion time: $(date)"
          echo ""
          echo "üöÄ Extension packs are now available for download!"