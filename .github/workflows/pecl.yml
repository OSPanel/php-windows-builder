name: Build PHP Extension From PECL
run-name: Build PHP Extension ${{ inputs.extension-url }}, ${{ inputs.extension-ref }}
on:
  workflow_dispatch:
    inputs:
      extension-url:
        description: 'Extension URL'
        required: true
      extension-ref:
        description: 'Extension ref'
        required: true
      php-version-list:
        description: 'PHP versions to build'
        required: false
      arch-list:
        type: choice
        options: ['x64', 'x86', 'x64,x86']
        description: 'Architectures to build'
        required: false
        default: 'x64,x86'
      ts-list:
        type: choice
        options: ['nts', 'ts', 'nts,ts']
        description: 'Thread safety to build'
        required: false
        default: 'nts,ts'
      args:
        description: 'Configure arguments'
        required: false
      libs:
        description: 'Libraries'
        required: false
      run-tests:
        type: choice
        options: ['true', 'false']
        description: 'Run tests after building the extension'
        required: false
        default: 'false'
      test-runner:
        description: 'Test runner to use'
        required: false
        default: 'run-tests.php'
      test-runner-args:
        description: 'Arguments for the test runner'
        required: false
jobs:
  get-extension-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.extension-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get the extension matrix
        id: extension-matrix
        uses: ./extension-matrix
        with:
          extension-url: ${{ inputs.extension-url }}
          extension-ref: ${{ inputs.extension-ref }}
          php-version-list: ${{ inputs.php-version-list }}
          arch-list: ${{ inputs.arch-list }}
          ts-list: ${{ inputs.ts-list }}
  create-release:
    runs-on: ubuntu-latest
    needs: get-extension-matrix
    steps:
      - name: Ensure release exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          extension_url="${{ inputs.extension-url }}"
          extension=$(basename "$extension_url" | tr '[:upper:]' '[:lower:]')
          echo "Original extension: $extension"



 
          # Replace extension names
          case "$extension" in
            "base58-php-ext") extension="base58" ;;
            "dd-trace-php") extension="ddtrace" ;;
            "msgpack-php") extension="msgpack" ;;
            "php-firebird") extension="interbase" ;;
            "php-ext-lz4") extension="lz4" ;;
            "php-memcached") extension="memcached" ;;
            "pecl-database-oci8") extension="oci8" ;;
            "pecl-database-pdo_oci") extension="pdo_oci" ;;
            "pecl-text-ssdeep") extension="ssdeep" ;;
          esac
          echo "Final extension: $extension" 
          ref="${{ inputs.extension-ref }}"
          # Remove 'v' prefix from version
          ref=$(echo "$ref" | sed 's/^v//')
          release_tag="${extension}-${ref}"
        
          if ! gh release view "${release_tag}" -R ${{ github.repository }} >/dev/null 2>&1; then
            gh release create "${release_tag}" \
              -t "${extension} ${ref}" \
              -n "Release of PECL extension '${extension}' version ${ref}" \
              -R ${{ github.repository }}
          fi
  extension:
    needs: get-extension-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.get-extension-matrix.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build the extension
        uses: ./extension
        with:
          extension-url: ${{ inputs.extension-url }}
          extension-ref: ${{ inputs.extension-ref }}
          php-version: ${{ matrix.php-version }}
          arch: ${{ matrix.arch }}
          ts: ${{ matrix.ts }}
          args: ${{ inputs.args }}
          libs: ${{ inputs.libs }}
          run-tests: ${{ inputs.run-tests }}
          test-runner: ${{ inputs.test-runner }}
          test-runner-args: ${{ inputs.test-runner-args }}
          build-directory: C:\b
        env:
          artifact-naming-scheme: pecl
          auto-detect-args: true
          auto-detect-libs: true
          no-debug-symbols-ddtrace: true

  pecl-release:
    runs-on: ubuntu-latest
    needs: [get-extension-matrix, extension]
    strategy:
      matrix: ${{fromJson(needs.get-extension-matrix.outputs.matrix)}}
    steps:
      - name: Create or Update PECL Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          extension_url="${{ inputs.extension-url }}"
          extension_original=$(basename "$extension_url" | tr '[:upper:]' '[:lower:]')
          extension="$extension_original"
                echo "Original extension: $extension"
          # Replace extension names for release
          case "$extension_original" in
            "base58-php-ext") extension="base58" ;;
            "dd-trace-php") extension="ddtrace" ;;
            "msgpack-php") extension="msgpack" ;;
            "php-firebird") extension="interbase" ;;
            "php-ext-lz4") extension="lz4" ;;
            "php-memcached") extension="memcached" ;;
            "pecl-database-oci8") extension="oci8" ;;
            "pecl-database-pdo_oci") extension="pdo_oci" ;;
            "pecl-text-ssdeep") extension="ssdeep" ;;
          esac
                echo "Final extension: $extension"
          php_version="${{ matrix.php-version }}"
          arch="${{ matrix.arch }}"
          ts="${{ matrix.ts }}"
          ref="${{ inputs.extension-ref }}"
          ref_clean=$(echo "$ref" | sed 's/^v//')

          case "$php_version" in
            7.2|7.3|7.4) vs_version="vc15" ;;
            8.0|8.1|8.2|8.3) vs_version="vs16" ;;
            8.4|8.5) vs_version="vs17" ;;
            *) vs_version="vs16" ;; # fallback
          esac
          
          # Artifact name uses original extension name and ref with 'v'
          artifact_name="php_${extension_original}-${ref}-${php_version}-${ts}-${vs_version}-${arch}.zip"
          # Release uses new extension name and ref without 'v'
          release_tag="${extension}-${ref_clean}"
          release_asset_name="php_${extension}-${ref_clean}-${php_version}-${ts}-${vs_version}-${arch}.zip"
          
          artifact_id=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts \
            --jq ".artifacts[] | select(.name==\"${artifact_name}\") | .id")

          if [ -z "$artifact_id" ]; then
            echo "Artifact ${artifact_name} not found"
            exit 1
          fi

          curl -L \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${artifact_id}/zip" \
            -o "artifact_wrapper.zip"

          unzip "artifact_wrapper.zip"
           echo "Final 2 extension: $extension" 
          # Rename the artifact file to the new naming scheme
          if [ -f "${artifact_name}" ]; then
            if [ "${artifact_name}" != "${release_asset_name}" ]; then
              mv "${artifact_name}" "${release_asset_name}"
            fi
          fi
          
          gh release upload "${release_tag}" "${release_asset_name}" \
          -R ${{ github.repository }} --clobber

  cleanup-artifacts:
    runs-on: ubuntu-latest
    if: success()
    needs: [pecl-release]
    steps:
      - name: Cleanup artifacts after successful release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "=== Deleting artifacts after successful release ==="
          artifact_ids=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq '.artifacts[].id' 2>/dev/null || echo "")
          if [ -n "$artifact_ids" ]; then
            for artifact_id in $artifact_ids; do
              echo "Deleting artifact $artifact_id"
              gh api -X DELETE repos/${{ github.repository }}/actions/artifacts/$artifact_id || true
            done
          fi
        
  cleanup-release:
    runs-on: ubuntu-latest
    if: failure()
    needs: [get-extension-matrix, extension, pecl-release]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup Release in Case of Failure
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          extension_url="${{ inputs.extension-url }}"
          extension=$(basename "$extension_url" | tr '[:upper:]' '[:lower:]')
          
          # Replace extension names
          case "$extension" in
            "base58-php-ext") extension="base58" ;;
            "dd-trace-php") extension="ddtrace" ;;
            "msgpack-php") extension="msgpack" ;;
            "php-firebird") extension="interbase" ;;
            "php-ext-lz4") extension="lz4" ;;
            "php-memcached") extension="memcached" ;;
            "pecl-database-oci8") extension="oci8" ;;
            "pecl-database-pdo_oci") extension="pdo_oci" ;;
            "pecl-text-ssdeep") extension="ssdeep" ;;
          esac
          
          ref="${{ inputs.extension-ref }}"
          # Remove 'v' prefix from version for release
          ref_clean=$(echo "$ref" | sed 's/^v//')
          release_tag="${extension}-${ref_clean}"

          echo "=== Starting cleanup for release: $release_tag ==="

          echo "=== Deleting all artifacts from this run ==="
          artifact_ids=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq '.artifacts[].id' 2>/dev/null || echo "")
          if [ -n "$artifact_ids" ]; then
            for artifact_id in $artifact_ids; do
              echo "Deleting artifact $artifact_id"
              gh api -X DELETE repos/${{ github.repository }}/actions/artifacts/$artifact_id || true
            done
          else
            echo "No artifacts found for this run"
          fi

          echo "=== Checking if release $release_tag exists ==="
          if gh release view "$release_tag" -R ${{ github.repository }} >/dev/null 2>&1; then
            echo "Release $release_tag exists, proceeding with cleanup"
            
            echo "=== Deleting all assets from release $release_tag ==="
            assets=$(gh release view "$release_tag" -R ${{ github.repository }} --json assets --jq '.assets[].name' 2>/dev/null || echo "")
            if [ -n "$assets" ]; then
              for asset in $assets; do
                echo "Deleting asset: $asset"
                gh release delete-asset "$release_tag" "$asset" -R ${{ github.repository }} -y || true
              done
            else
              echo "No assets found in release $release_tag"
            fi

            echo "=== Deleting release $release_tag ==="
            gh release delete "$release_tag" -R ${{ github.repository }} -y || true
          else
            echo "Release $release_tag does not exist, skipping release cleanup"
          fi

          echo "=== Checking if tag $release_tag exists ==="
          if git rev-parse "refs/tags/$release_tag" >/dev/null 2>&1; then
            echo "Tag $release_tag exists, deleting it"
            git push origin ":refs/tags/$release_tag" || true
          else
            echo "Tag $release_tag does not exist, skipping tag deletion"
          fi

          echo "=== Cleanup completed successfully ==="
