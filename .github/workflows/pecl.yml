name: Build PHP Extension From PECL
run-name: Build PHP Extension ${{ inputs.extension-url }}, ${{ inputs.extension-ref }}
on:
  workflow_dispatch:
    inputs:
      extension-url:
        description: 'Extension URL'
        required: true
      extension-ref:
        description: 'Extension ref'
        required: true
      php-version-list:
        description: 'PHP versions to build'
        required: false
      arch-list:
        type: choice
        options: ['x64', 'x86', 'x64,x86']
        description: 'Architectures to build'
        required: false
        default: 'x64,x86'
      ts-list:
        type: choice
        options: ['nts', 'ts', 'nts,ts']
        description: 'Thread safety to build'
        required: false
        default: 'nts,ts'
      args:
        description: 'Configure arguments'
        required: false
      libs:
        description: 'Libraries'
        required: false
      run-tests:
        type: choice
        options: ['true', 'false']
        description: 'Run tests after building the extension'
        required: false
        default: 'false'
      test-runner:
        description: 'Test runner to use'
        required: false
        default: 'run-tests.php'
      test-runner-args:
        description: 'Arguments for the test runner'
        required: false
jobs:
  get-extension-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.extension-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get the extension matrix
        id: extension-matrix
        uses: ./extension-matrix
        with:
          extension-url: ${{ inputs.extension-url }}
          extension-ref: ${{ inputs.extension-ref }}
          php-version-list: ${{ inputs.php-version-list }}
          arch-list: ${{ inputs.arch-list }}
          ts-list: ${{ inputs.ts-list }}

  extension:
    needs: get-extension-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.get-extension-matrix.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build the extension
        uses: ./extension
        with:
          extension-url: ${{ inputs.extension-url }}
          extension-ref: ${{ inputs.extension-ref }}
          php-version: ${{ matrix.php-version }}
          arch: ${{ matrix.arch }}
          ts: ${{ matrix.ts }}
          args: ${{ inputs.args }}
          libs: ${{ inputs.libs }}
          run-tests: ${{ inputs.run-tests }}
          test-runner: ${{ inputs.test-runner }}
          test-runner-args: ${{ inputs.test-runner-args }}
          build-directory: C:\b
        env:
          artifact-naming-scheme: pecl
          auto-detect-args: true
          auto-detect-libs: true
          no-debug-symbols-ddtrace: true

  pecl-release:
    runs-on: ubuntu-latest
    needs: [get-extension-matrix, extension]
    strategy:
      matrix: ${{fromJson(needs.get-extension-matrix.outputs.matrix)}}
    steps:
    - name: Create PECL release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        extension=$(basename "${{ inputs.extension-url }}" | tr '[:upper:]' '[:lower:]')
        php_version="${{ matrix.php-version }}"
        arch="${{ matrix.arch }}"
        ts="${{ matrix.ts }}"
        ref="${{ inputs.extension-ref }}"
        
        # Determine VS version based on PHP version
        case "$php_version" in
          7.2|7.3|7.4) vs_version="vc15" ;;
          8.0|8.1|8.2|8.3) vs_version="vs16" ;;
          8.4|8.5) vs_version="vs17" ;;
          *) vs_version="vs16" ;; # default fallback
        esac
        
        # Artifact name matches what's created in extension job (with .zip extension)
        artifact_name="php_${extension}-${ref}-${php_version}-${ts}-${vs_version}-${arch}.zip"
        
        # Get artifact ID and download as zip
        artifact_id=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq ".artifacts[] | select(.name==\"${artifact_name}\") | .id")
        
        if [ -z "$artifact_id" ]; then
          echo "Artifact ${artifact_name} not found"
          exit 1
        fi
        
        # Download and extract artifact
        curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${artifact_id}/zip" \
          -o "artifact.zip"
        
        # Create directory for extraction
        mkdir -p extracted
        cd extracted
        
        # Extract the artifact zip
        unzip ../artifact.zip
        
        # Release by extension version
        release_tag="${extension}-${ref}"
        
        # Create or update release
        if ! gh release view "${release_tag}" -R ${{ github.repository }}; then
          gh release create "${release_tag}" ./* \
            -t "${extension} ${ref}" \
            -n "Release of PECL extension '${extension}' version ${ref}" \
            -R ${{ github.repository }}
        else
          gh release upload "${release_tag}" ./* \
            -R ${{ github.repository }} --clobber
        fi
