name: Build PHP
run-name: Build PHP ${{ inputs.php-version }}

on:
  workflow_dispatch:
    inputs:
      php-version:
        description: 'PHP versions to build (comma-separated)'
        required: true
      arch:
        description: 'Architecture'
        required: true
        type: choice
        options: ['x64', 'x86']
        default: 'x64'
      ts:
        description: 'Thread safety'
        required: true
        type: choice
        options: ['ts', 'nts', 'ts,nts']
        default: 'ts,nts'
      upload:
        type: choice
        options: ['true', 'false']
        description: Upload artifacts to the downloads server
        required: false
        default: 'true'
        
jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          ARCH="${{ inputs.arch }}"
          TS_INPUT="${{ inputs.ts }}"
          PHP_VERSIONS="${{ inputs.php-version }}"

          IFS=',' read -ra TS_VALUES <<< "$TS_INPUT"
          IFS=',' read -ra PHP_VALUES <<< "$PHP_VERSIONS"
          
          MATRIX_JSON="{\"include\":["
          SEP=""
          for PHP_VERSION in "${PHP_VALUES[@]}"; do
            for TS in "${TS_VALUES[@]}"; do
              MATRIX_JSON+="${SEP}{\"php-version\":\"$PHP_VERSION\",\"arch\":\"$ARCH\",\"ts\":\"$TS\"}"
              SEP=","
            done
          done
          MATRIX_JSON+="]}"

          echo "Generated matrix: $MATRIX_JSON"
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  php:
    needs: generate-matrix
    runs-on: windows-2022
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build
        uses: ./php
        with:
          php-version: ${{ matrix.php-version }}
          arch: ${{ matrix.arch }}
          ts: ${{ matrix.ts }}

  artifacts:
    runs-on: windows-2022
    needs: [generate-matrix, php]
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Create PHP release
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $version = "${{ matrix.php-version }}"
          $phpts = "${{ matrix.ts }}"
          $phparch = "${{ matrix.arch }}"
          $artifactName = "artifacts-${version}-${phparch}-${phpts}"
          
          $artifactId = gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts --jq ".artifacts[] | select(.name==\"${artifactName}\") | .id"
          
          $headers = @{
            "Authorization" = "token ${{ secrets.GITHUB_TOKEN }}"
            "Accept" = "application/vnd.github.v3+json"
          }
          
          Invoke-WebRequest -Uri "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${artifactId}/zip" -Headers $headers -OutFile "artifact_wrapper.zip"
          
          Expand-Archive -Path "artifact_wrapper.zip" -DestinationPath "." -Force
          
          Get-ChildItem -Filter "*.zip" | ForEach-Object {
            $originalName = $_.Name
            $newName = $originalName
            $newName = $newName -replace '-SSE4\.2', '', 'IgnoreCase'
            $newName = $newName.ToLower()            
            $newName = $newName -replace '-win32-', '-Win32-'
            
            if ($originalName -ne $newName) {
              Rename-Item -Path $_.FullName -NewName $newName
              Write-Host "Renamed: $originalName -> $newName"
            }
          }
          
          $releaseExists = $false
          try {
            gh release view "php-${version}" -R ${{ github.repository }}
            $releaseExists = $true
          }
          catch {
            $releaseExists = $false
          }
          
          if (-not $releaseExists) {
            gh release create "php-${version}" php-*.zip -t "PHP ${version}" -n "Release of PHP version ${version}" -R ${{ github.repository }}
          }
          else {
            gh release upload "php-${version}" php-*.zip -R ${{ github.repository }} --clobber
          }
