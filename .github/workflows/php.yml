name: Build PHP
run-name: Build PHP ${{ inputs.php-version }}

on:
  workflow_dispatch:
    inputs:
      php-version:
        description: 'PHP versions to build (comma-separated)'
        required: true
      arch:
        description: 'Architecture'
        required: true
        type: choice
        options: ['x64', 'x86']
        default: 'x64'
      ts:
        description: 'Thread safety'
        required: true
        type: choice
        options: ['ts', 'nts', 'ts,nts']
        default: 'ts,nts'
      upload:
        type: choice
        options: ['true', 'false']
        description: Upload artifacts to the downloads server
        required: false
        default: 'true'
        
jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          ARCH="${{ inputs.arch }}"
          TS_INPUT="${{ inputs.ts }}"
          PHP_VERSIONS="${{ inputs.php-version }}"

          IFS=',' read -ra TS_VALUES <<< "$TS_INPUT"
          IFS=',' read -ra PHP_VALUES <<< "$PHP_VERSIONS"
          
          MATRIX_JSON="{\"include\":["
          SEP=""
          for PHP_VERSION in "${PHP_VALUES[@]}"; do
            for TS in "${TS_VALUES[@]}"; do
              MATRIX_JSON+="${SEP}{\"php-version\":\"$PHP_VERSION\",\"arch\":\"$ARCH\",\"ts\":\"$TS\"}"
              SEP=","
            done
          done
          MATRIX_JSON+="]}"

          echo "Generated matrix: $MATRIX_JSON"
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  php:
    needs: generate-matrix
    runs-on: windows-2022
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build
        uses: ./php
        with:
          php-version: ${{ matrix.php-version }}
          arch: ${{ matrix.arch }}
          ts: ${{ matrix.ts }}

  # Новое задание для создания релизов (выполняется только один раз для каждой версии PHP)
  create-releases:
    runs-on: ubuntu-latest
    needs: [generate-matrix, php]
    strategy:
      matrix:
        php-version: ${{ fromJson(needs.generate-matrix.outputs.matrix).include[*].php-version }}
    steps:
      - name: Create release for PHP ${{ matrix.php-version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ matrix.php-version }}"
          RELEASE_TAG="php-${VERSION}"
          
          echo "Creating/checking release for PHP ${VERSION}"
          
          # Проверяем существование релиза
          if gh release view "${RELEASE_TAG}" -R ${{ github.repository }} >/dev/null 2>&1; then
            echo "Release ${RELEASE_TAG} already exists, deleting it to recreate..."
            gh release delete "${RELEASE_TAG}" -R ${{ github.repository }} --yes
          fi
          
          # Создаем новый пустой релиз
          echo "Creating new release ${RELEASE_TAG}..."
          gh release create "${RELEASE_TAG}" \
            --title "PHP ${VERSION}" \
            --notes "Release of PHP version ${VERSION}" \
            --repo ${{ github.repository }}
          
          echo "Release ${RELEASE_TAG} created successfully"

  artifacts:
    runs-on: windows-2022
    needs: [generate-matrix, create-releases]
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Upload files to PHP release
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $version = "${{ matrix.php-version }}"
          $phpts = "${{ matrix.ts }}"
          $phparch = "${{ matrix.arch }}"
          $artifactName = "artifacts-${version}-${phparch}-${phpts}"
          $releaseTag = "php-${version}"
          
          Write-Host "Looking for artifact: $artifactName"
          Write-Host "Release tag: $releaseTag"
          
          # Получаем список всех артефактов для этого запуска
          $artifactsJson = gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts
          $artifacts = $artifactsJson | ConvertFrom-Json
          
          Write-Host "Available artifacts:"
          $artifacts.artifacts | ForEach-Object {
            Write-Host "- $($_.name)"
          }
          
          # Ищем нужный артефакт
          $artifact = $artifacts.artifacts | Where-Object { $_.name -eq $artifactName }
          
          if (-not $artifact) {
            Write-Host "Artifact '$artifactName' not found. Skipping..."
            exit 0
          }
          
          $artifactId = $artifact.id
          Write-Host "Found artifact ID: $artifactId"
          
          # Скачиваем артефакт
          try {
            $headers = @{
              "Authorization" = "Bearer ${{ secrets.GITHUB_TOKEN }}"
              "Accept" = "application/vnd.github+json"
              "X-GitHub-Api-Version" = "2022-11-28"
            }
            
            $downloadUrl = "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${artifactId}/zip"
            Write-Host "Downloading from: $downloadUrl"
            
            Invoke-WebRequest -Uri $downloadUrl -Headers $headers -OutFile "artifact_wrapper.zip"
            Write-Host "Download completed successfully"
          }
          catch {
            Write-Host "Error downloading artifact: $($_.Exception.Message)"
            exit 1
          }
          
          # Распаковываем артефакт
          if (Test-Path "artifact_wrapper.zip") {
            Expand-Archive -Path "artifact_wrapper.zip" -DestinationPath "." -Force
            Write-Host "Artifact extracted successfully"
          } else {
            Write-Host "Artifact file not found after download"
            exit 1
          }
          
          # Переименование файлов: убираем -SSE4.2, приводим к нижнему регистру, но оставляем Win32 с правильным регистром
          $zipFiles = Get-ChildItem -Filter "*.zip" | Where-Object { $_.Name -ne "artifact_wrapper.zip" }
          if ($zipFiles.Count -eq 0) {
            Write-Host "No ZIP files found in extracted artifact"
            exit 1
          }
          
          Write-Host "Processing ZIP files:"
          $zipFiles | ForEach-Object {
            $originalName = $_.Name
            $newName = $originalName
            
            # Убираем -SSE4.2 (с учетом разного регистра)
            $newName = $newName -replace '-SSE4.2', ''
            
            # Приводим к нижнему регистру
            $newName = $newName.ToLower()
            
            # Заменяем -win32- на -Win32-
            $newName = $newName -replace '-win32-', '-Win32-'
            
            if ($originalName -ne $newName) {
              Rename-Item -Path $_.FullName -NewName $newName
              Write-Host "Renamed: $originalName -> $newName"
            } else {
              Write-Host "No rename needed: $originalName"
            }
          }
          
          # Получаем файлы для загрузки (исключая artifact_wrapper.zip)
          $phpFiles = Get-ChildItem -Filter "php-*.zip"
          if ($phpFiles.Count -eq 0) {
            Write-Host "No PHP files to upload"
            exit 1
          }
          
          Write-Host "Files to upload to release ${releaseTag}:"
          $phpFiles | ForEach-Object { Write-Host "- $($_.Name)" }
          
          # Ждем немного, чтобы релиз точно был создан
          Start-Sleep -Seconds 5
          
          # Загружаем файлы в существующий релиз
          try {
            Write-Host "Uploading files to existing release ${releaseTag}..."
            foreach ($file in $phpFiles) {
              Write-Host "Uploading: $($file.Name)"
              $maxRetries = 3
              $retryCount = 0
              $uploaded = $false
              
              while (-not $uploaded -and $retryCount -lt $maxRetries) {
                try {
                  gh release upload $releaseTag $file.Name --repo ${{ github.repository }} --clobber
                  Write-Host "Successfully uploaded: $($file.Name)"
                  $uploaded = $true
                }
                catch {
                  $retryCount++
                  Write-Host "Upload attempt $retryCount failed for $($file.Name): $($_.Exception.Message)"
                  if ($retryCount -lt $maxRetries) {
                    Write-Host "Retrying in 10 seconds..."
                    Start-Sleep -Seconds 10
                  }
                }
              }
              
              if (-not $uploaded) {
                Write-Host "Failed to upload $($file.Name) after $maxRetries attempts"
                exit 1
              }
            }
            Write-Host "All files uploaded successfully to release ${releaseTag}"
          }
          catch {
            Write-Host "Error uploading files: $($_.Exception.Message)"
            Write-Host "Error details: $_"
            exit 1
          }
          
          Write-Host "Upload process completed successfully"
